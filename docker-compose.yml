---
version: '2'
services:
  my-burrow:
    image: my/burrow:latest
    hostname: my-burrow
    container_name: my-burrow
    depends_on:
      - broker
      - zookeeper
    ports:
      - "8000:8000"
    volumes:
      - $PWD/../burrow/burrow-logs:/logs
    restart: always

  burrow-exporter:
    image: solsson/burrow-exporter:latest
#    image: bridg/burrow-prometheus-exporter
    hostname: burrow-exporter
    container_name: burrow-exporter
    depends_on:
      - broker
      - zookeeper
      - my-burrow
    ports:
      - "9408:9408"
    environment:
      BURROW_ADDR: "http://my-burrow:8000"
      METRICS_ADDR: "0.0.0.0:9408"
      INTERVAL: "30"
      API_VERSION: "2"

  zk-exporter:
    image: my/zk-exporter:latest
    hostname: zk-exporter
    container_name: zk-exporter
    depends_on:
      - broker
      - zookeeper
    ports:
      - "9120:9120"

  nodeexporter:
    image: prom/node-exporter:v0.16.0
    container_name: nodeexporter
    user: root
    privileged: true
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.ignored-mount-points=^/(sys|proc|dev|host|etc)($$|/)'
    restart: unless-stopped
    ports:
      - "9100:9100"
    expose:
      - 9100
#    network_mode: bridge
#    networks:
#      - host
#      - monitor-net
    labels:
      org.label-schema.group: "monitoring"


  kafka-exporter:
    image: danielqsj/kafka-exporter
    hostname: kafka-exporter
    container_name: kafka-exporter
    depends_on:
      - broker
      - zookeeper
      - my-burrow
    ports:
      - "9308:9308"
#    networks:
#      - monitoring
    command: --kafka.server=broker:9092
    restart: always
#    deploy:
#      mode: replicated
#      resources:
#        limits:
#          memory: 128M
#        reservations:
#          memory: 64M      
#      replicas: 1
#      endpoint_mode: vip

  prometheus:
    image: prom/prometheus
    hostname: prometheus
    container_name: prometheus
    depends_on:
      - broker
      - zookeeper
      - my-burrow
    ports:
      - "9090:9090"
#    networks:
#      - monitoring
    volumes:
      - $PWD/prometheus-data:/prometheus
      - $PWD/prometheus:/etc/prometheus
#    secrets:
#      - prometheus.yml
    command: 
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention=168h'
#    deploy:
#      resources:
#        limits:
#          cpus: '2'
#          memory: 4096M
#        reservations:
#          memory: 1024M
#      replicas: 1
#      endpoint_mode: vip
#      placement:
#        constraints:
#           - "node.labels.prometheus == true"

  grafana:
    image: grafana/grafana
    hostname: grafana
    container_name: grafana
    depends_on:
      - prometheus
    ports:
      - "3000:3000"
    user: "root"
#    networks:
#      - monitoring
    volumes:
      - $PWD/grafana:/var/lib/grafana
#    deploy:
#      mode: replicated
#      resources:
#        limits:
#          memory: 512M
#        reservations:
#          memory: 128M
#      replicas: 1
#      endpoint_mode: vip
#      placement:
#        constraints:
#           - "node.labels.grafana == true"

#  secrets:
#    prometheus.yml:
#      file: config/prometheus.yml
#    alertmanager.yml:
#      file: config/alertmanager.yml
#  networks:
#    monitoring
#      external: true





  kafka-generic-consumer:
    image: com.ing.kafka.generic.processor/kafka-generic-processor:0.0.1-SNAPSHOT
    hostname: kafka-generic-consumer
    container_name: kafka-generic-consumer
    depends_on:
      - broker
    ports:
      - "8282:8080"
    environment:
      BROKERS: 'http://broker:9092'
      SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      TOPICS: 'pageviews'
      MODE: 'consumer'



  zookeeper:
    image: confluentinc/cp-zookeeper:5.0.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    volumes:
      - $PWD/jmx-exporter-agent:/usr/app/zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
      EXTRA_ARGS: "-javaagent:/usr/app/zookeeper/jmx_prometheus_javaagent-0.3.1.jar=7070:/usr/app/zookeeper/zookeeper.yml"

  broker:
    image: confluentinc/cp-enterprise-kafka:5.0.0
    hostname: broker
    container_name: broker
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "29092:29092"
    volumes:
      - $PWD/jmx-exporter-agent:/usr/app/kafka
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_METRIC_REPORTERS: io.confluent.metrics.reporter.ConfluentMetricsReporter
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      CONFLUENT_METRICS_REPORTER_BOOTSTRAP_SERVERS: broker:9092
      CONFLUENT_METRICS_REPORTER_ZOOKEEPER_CONNECT: zookeeper:2181
      CONFLUENT_METRICS_REPORTER_TOPIC_REPLICAS: 1
      CONFLUENT_METRICS_ENABLE: 'true'
      CONFLUENT_SUPPORT_CUSTOMER_ID: 'anonymous'
      KAFKA_OPTS: "-javaagent:/usr/app/kafka/jmx_prometheus_javaagent-0.3.1.jar=7072:/usr/app/kafka/kafka-0-8-2.yml"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:5.6.0
    container_name: elasticsearch
    #restart:always
    depends_on:
      - connect
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      xpack.security.enabled: "false"
      ES_JAVA_OPTS: "-Xms1g -Xmx1g"

  kibana:
    image: docker.elastic.co/kibana/kibana:5.5.2
    container_name: kibana
    restart: always
    depends_on:
      - elasticsearch
    ports:
      - "5601:5601"
    environment:
      xpack.security.enabled: "false"
      discovery.type: "single-node"


#  burrow:
#    image: magnetme/burrow
#    hostname: burrow
#    container_name: burrow
#    ports:
#      - "8181:8181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    depends_on:
#      - broker
#      - zookeeper

#  kafka-webview:
#    image: sourcelaborg/kafka-webview:latest
#    hostname: kafka-webview
#    container_name: kafka-webview
#    ports:
#      - "8080:8080"
#    depends_on:
#      - broker
#      - zookeeper

  schema-registry:
    image: confluentinc/cp-schema-registry:5.0.0
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      - zookeeper
      - broker
    ports:
      - "8079:8081"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_CONNECTION_URL: 'zookeeper:2181'

  connect:
    image: confluentinc/cp-kafka-connect:5.0.0
    hostname: connect
    container_name: connect
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - "8083:8083"
    volumes:
      - $PWD/connect-plugins:/connect-plugins
      - mi2:/usr/share/java/monitoring-interceptors/
      - $PWD/connect-plugins/kafka-connect-transform-nullfilter/null-filter-4.0.0-SNAPSHOT.jar:/usr/share/java/kafka-connect-elasticsearch/null-filter-4.0.0-SNAPSHOT.jar
    environment:
      CONNECT_BOOTSTRAP_SERVERS: 'broker:9092'
      CONNECT_REST_ADVERTISED_HOST_NAME: connect
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_OFFSET_FLUSH_INTERVAL_MS: 10000
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 1
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 1
      #CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER: org.apache.kafka.connect.storage.StringConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      #CONNECT_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #CONNECT_INTERNAL_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      #CONNECT_INTERNAL_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      CLASSPATH: /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.0.0.jar
      CONNECT_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
      CONNECT_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"
      CONNECT_PLUGIN_PATH: "/usr/share/java,/connect-plugins"
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: org.apache.zookeeper=ERROR,org.I0Itec.zkclient=ERROR,org.reflections=ERROR

#  control-center:
#    #image: confluentinc/cp-enterprise-control-center:5.0.0-beta30
#    image: confluentinc/cp-enterprise-control-center:5.0.0
#    hostname: control-center
#    container_name: control-center
#    depends_on:
#      - zookeeper
#      - broker
#      - schema-registry
#      - connect
#      - ksql-server
#    ports:
#      - "9021:9021"
#    environment:
#      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'broker:9092'
#      CONTROL_CENTER_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      CONTROL_CENTER_CONNECT_CLUSTER: 'connect:8083'
#      #CONTROL_CENTER_KSQL_URL: "http://ksql-server:8088"
#      CONTROL_CENTER_KSQL_ENDPOINT: "http://ksql-server:8888"
#      CONTROL_CENTER_REPLICATION_FACTOR: 1
#      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
#      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
#      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
#      PORT: 9021

#  ksql-server:
#    image: confluentinc/cp-ksql-server:5.0.0
#    hostname: ksql-server
#    container_name: ksql-server
#    depends_on:
#      - broker
#      - connect
#    ports:
#      - "8888:8888"
#    environment:
#      KSQL_CONFIG_DIR: "/etc/ksql"
#      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
#      KSQL_BOOTSTRAP_SERVERS: "broker:9092"
#      KSQL_HOST_NAME: ksql-server
#      KSQL_APPLICATION_ID: "cp-all-in-one"
#      KSQL_LISTENERS: "http://0.0.0.0:8888"
#      KSQL_CACHE_MAX_BYTES_BUFFERING: 0
#      KSQL_KSQL_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
#      KSQL_PRODUCER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringProducerInterceptor"
#      KSQL_CONSUMER_INTERCEPTOR_CLASSES: "io.confluent.monitoring.clients.interceptor.MonitoringConsumerInterceptor"

#  ksql-cli:
#    image: confluentinc/cp-ksql-cli:5.0.0
#    container_name: ksql-cli
#    depends_on:
#      - broker
#      - connect
#      - ksql-server
#    entrypoint: /bin/sh
#    tty: true

  ksql-datagen:
    image: confluentinc/ksql-examples:latest
    hostname: ksql-datagen
    container_name: ksql-datagen
    depends_on:
      - broker
      - schema-registry
      - connect
    volumes:
      - mi2:/usr/share/java/monitoring-interceptors/
      - $PWD/script/avro:/schemas/
    command: "bash -c 'echo Waiting for Kafka to be ready... && \
                       cub kafka-ready -b broker:9092 1 20 && \
                       echo Waiting for Confluent Schema Registry to be ready... && \
                       cub sr-ready schema-registry 8081 20 && \
                       echo Waiting a few seconds for topic creation to finish... && \
                       sleep 11 && \
                       cp /usr/share/java/monitoring-interceptors/monitoring-interceptors-5.0.0.jar /usr/share/java/ksql-examples/monitoring-interceptors-5.0.0.jar && \
                       tail -f /dev/null'"
    environment:
      KSQL_CONFIG_DIR: "/etc/ksql"
      KSQL_LOG4J_OPTS: "-Dlog4j.configuration=file:/etc/ksql/log4j-rolling.properties"
      STREAMS_BOOTSTRAP_SERVERS: broker:9092
      STREAMS_SCHEMA_REGISTRY_HOST: schema-registry
      STREAMS_SCHEMA_REGISTRY_PORT: 8081
    restart: always

  rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    depends_on:
      - zookeeper
      - broker
      - schema-registry
    ports:
      - 8082:8082
    hostname: rest-proxy
    container_name: rest-proxy
    environment:
      KAFKA_REST_HOST_NAME: rest-proxy
      KAFKA_REST_BOOTSTRAP_SERVERS: 'broker:9092'
      KAFKA_REST_LISTENERS: "http://0.0.0.0:8082"
      KAFKA_REST_SCHEMA_REGISTRY_URL: 'http://schema-registry:8081'

volumes:
    mi2: {}
